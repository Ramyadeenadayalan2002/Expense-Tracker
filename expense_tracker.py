"""
Expense Tracker App (White & Grey theme)
Author: Generated by ChatGPT (GPT-5 Thinking mini)
Description:
A simple GUI expense tracker using Tkinter and Pandas.
Features:
- Add expense (date, category, amount, note)
- Delete selected expense
- Shows total expense
- Saves to expenses.csv (auto-created)
"""

import tkinter as tk
from tkinter import ttk, messagebox
from tkinter import StringVar, DoubleVar
import pandas as pd
from datetime import datetime
import os

CSV_FILE = "expenses.csv"
COLUMNS = ["Date", "Category", "Amount", "Note"]

class ExpenseTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("Expense Tracker")
        self.root.geometry("700x480")
        self.root.resizable(False, False)

        # Theme: white background, grey accents
        style = ttk.Style()
        style.theme_use('default')
        style.configure("TFrame", background="#ffffff")
        style.configure("TLabel", background="#ffffff", foreground="#333333", font=("Segoe UI", 10))
        style.configure("Header.TLabel", font=("Segoe UI", 12, "bold"))
        style.configure("TButton", font=("Segoe UI", 10))
        style.configure("Treeview", font=("Segoe UI", 10), rowheight=24)
        style.configure("Treeview.Heading", font=("Segoe UI", 10, "bold"))

        self.main_frame = ttk.Frame(root, padding=12)
        self.main_frame.pack(fill="both", expand=True)

        header = ttk.Label(self.main_frame, text="Expense Tracker", style="Header.TLabel")
        header.pack(anchor="w")

        # Input frame
        input_frame = ttk.Frame(self.main_frame)
        input_frame.pack(fill="x", pady=(10,8))

        # Date
        ttk.Label(input_frame, text="Date (YYYY-MM-DD):").grid(row=0, column=0, sticky="w", padx=(0,6), pady=4)
        self.date_var = StringVar(value=datetime.now().strftime("%Y-%m-%d"))
        self.date_entry = ttk.Entry(input_frame, textvariable=self.date_var, width=14)
        self.date_entry.grid(row=0, column=1, sticky="w", pady=4)

        # Category
        ttk.Label(input_frame, text="Category:").grid(row=0, column=2, sticky="w", padx=(12,6), pady=4)
        self.category_var = StringVar()
        self.category_combo = ttk.Combobox(input_frame, textvariable=self.category_var, values=[
            "Food", "Transport", "Shopping", "Bills", "Entertainment", "Health", "Other"
        ], width=16)
        self.category_combo.grid(row=0, column=3, sticky="w", pady=4)
        self.category_combo.set("Other")

        # Amount
        ttk.Label(input_frame, text="Amount:").grid(row=1, column=0, sticky="w", padx=(0,6), pady=4)
        self.amount_var = StringVar()
        self.amount_entry = ttk.Entry(input_frame, textvariable=self.amount_var, width=16)
        self.amount_entry.grid(row=1, column=1, sticky="w", pady=4)

        # Note
        ttk.Label(input_frame, text="Note:").grid(row=1, column=2, sticky="w", padx=(12,6), pady=4)
        self.note_var = StringVar()
        self.note_entry = ttk.Entry(input_frame, textvariable=self.note_var, width=35)
        self.note_entry.grid(row=1, column=3, sticky="w", pady=4)

        # Buttons
        btn_frame = ttk.Frame(self.main_frame)
        btn_frame.pack(fill="x", pady=(6,10))
        add_btn = ttk.Button(btn_frame, text="Add Expense", command=self.add_expense)
        add_btn.pack(side="left")
        del_btn = ttk.Button(btn_frame, text="Delete Selected", command=self.delete_selected)
        del_btn.pack(side="left", padx=(8,0))
        export_btn = ttk.Button(btn_frame, text="Export CSV", command=self.export_csv)
        export_btn.pack(side="left", padx=(8,0))

        # Treeview (table)
        tree_frame = ttk.Frame(self.main_frame)
        tree_frame.pack(fill="both", expand=True)

        columns = ("Date", "Category", "Amount", "Note")
        self.tree = ttk.Treeview(tree_frame, columns=columns, show="headings", selectmode="browse")
        for col in columns:
            self.tree.heading(col, text=col)
            if col == "Note":
                self.tree.column(col, width=260, anchor="w")
            elif col == "Amount":
                self.tree.column(col, width=100, anchor="e")
            else:
                self.tree.column(col, width=120, anchor="w")

        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscroll=vsb.set)
        vsb.pack(side="right", fill="y")
        self.tree.pack(fill="both", expand=True)

        # Total label
        self.total_var = StringVar(value="Total: 0.00")
        total_frame = ttk.Frame(self.main_frame)
        total_frame.pack(fill="x", pady=(8,0))
        self.total_label = ttk.Label(total_frame, textvariable=self.total_var, font=("Segoe UI", 11, "bold"))
        self.total_label.pack(anchor="e")

        # Load data
        self.load_data()

    def load_data(self):
        if os.path.exists(CSV_FILE):
            try:
                df = pd.read_csv(CSV_FILE)
                # Validate columns
                if set(COLUMNS).issubset(df.columns):
                    for _, row in df.iterrows():
                        self.tree.insert("", "end", values=(row["Date"], row["Category"], f'{float(row["Amount"]):.2f}', row["Note"]))
                self.update_total()
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load data: {e}")

    def save_data(self):
        # Extract tree items
        items = []
        for child in self.tree.get_children():
            d, c, a, n = self.tree.item(child, "values")
            items.append({"Date": d, "Category": c, "Amount": float(a), "Note": n})
        df = pd.DataFrame(items, columns=COLUMNS)
        df.to_csv(CSV_FILE, index=False)

    def add_expense(self):
        date = self.date_var.get().strip()
        category = self.category_var.get().strip() or "Other"
        amount = self.amount_var.get().strip()
        note = self.note_var.get().strip()

        # Basic validation
        try:
            # Validate date
            datetime.strptime(date, "%Y-%m-%d")
        except Exception:
            messagebox.showwarning("Validation", "Date must be in YYYY-MM-DD format.")
            return

        try:
            amt = float(amount)
            if amt < 0:
                raise ValueError("Negative amount")
        except Exception:
            messagebox.showwarning("Validation", "Enter a valid positive number for Amount.")
            return

        self.tree.insert("", "end", values=(date, category, f"{amt:.2f}", note))
        self.save_data()
        self.update_total()

        # Clear amount and note
        self.amount_var.set("")
        self.note_var.set("")

    def delete_selected(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showinfo("Delete", "No item selected.")
            return
        confirm = messagebox.askyesno("Confirm", "Delete selected expense?")
        if not confirm:
            return
        for item in selected:
            self.tree.delete(item)
        self.save_data()
        self.update_total()

    def update_total(self):
        total = 0.0
        for child in self.tree.get_children():
            vals = self.tree.item(child, "values")
            try:
                total += float(vals[2])
            except:
                pass
        self.total_var.set(f"Total: {total:.2f}")

    def export_csv(self):
        # Re-save to ensure current view is exported
        try:
            self.save_data()
            messagebox.showinfo("Exported", f"Data exported to {CSV_FILE}")
        except Exception as e:
            messagebox.showerror("Error", f"Export failed: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTracker(root)
    root.mainloop()
